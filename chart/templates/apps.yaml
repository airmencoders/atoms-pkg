
{{ if .Values.apps.enabled -}}
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: atoms-project
  namespace: argocd
  # Finalizer that ensures that project is not deleted until it is not referenced by any application
  finalizers:
    - resources-finalizer.argocd.argoproj.io
spec:
  # Project description
  description: The app bundle POC project

  # Allow manifests to deploy from any Git repos
  sourceRepos:
  - '*'

  # Only permit applications to deploy to the guestbook namespace in the same cluster
  destinations:
  - namespace: '*'
    server: '*'

  # Deny all cluster-scoped resources from being created, except for Namespace
  clusterResourceWhitelist:
  - group: '*'
    kind: '*'
{{- end }}
---
{{ if .Values.apps.enabled -}}
# 1. Query your secret for "existance" and return in the $secret variable
{{- $secret := (lookup "v1" "Secret" .Release.Namespace "git-mil-aoa-creds") -}}

# 2. If the secret exists, write it back out (it'll be Base64 encoded so used the "data" key)
{{ if $secret -}}
apiVersion: v1
kind: Secret
metadata:
  name: git-mil-aoa-creds
  namespace: argocd
  labels:
        argocd.argoproj.io/secret-type: repository
type: Opaque


data:
  url: {{ $secret.data.url }}
  password: {{ $secret.data.password }}
  username: {{ $secret.data.username }}


{{ end }}
{{ end }}
---
{{ if .Values.apps.enabled -}}
# 1. Query your secret for "existance" and return in the $secret variable
{{- $secret2 := (lookup "v1" "Secret" .Release.Namespace "git-mil-nr-creds") -}}

# 2. If the secret exists, write it back out (it'll be Base64 encoded so used the "data" key)
{{ if $secret2 -}}
apiVersion: v1
kind: Secret
metadata:
  name: git-mil-nr-creds
  namespace: argocd
  labels:
        argocd.argoproj.io/secret-type: repository
type: Opaque


data:
  url: {{ $secret2.data.url }}
  password: {{ $secret2.data.password }}
  username: {{ $secret2.data.username }}


{{ end }}
{{ end }}

---
{{ if .Values.apps.enabled -}}
# 1. Query your secret for "existance" and return in the $secret variable
{{- $secret := (lookup "v1" "Secret" .Release.Namespace "client-certs") -}}

# 2. If the secret exists, write it back out (it'll be Base64 encoded so used the "data" key)
{{ if $secret -}}
apiVersion: v1
kind: Secret
metadata:
    name: client-certs
    namespace: argocd
type: Opaque
data: |
    {{- range $key, $value := {{ toYaml $secret.data | indent 4 }} }}
    {{ $key }} = {{ tpl $value $ }}
    {{- end }}
{{ end }}
{{ end }}